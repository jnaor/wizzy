// Generated by gencpp from file wizzybug_msgs/obstacle.msg
// DO NOT EDIT!


#ifndef WIZZYBUG_MSGS_MESSAGE_OBSTACLE_H
#define WIZZYBUG_MSGS_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/String.h>

namespace wizzybug_msgs
{
template <class ContainerAllocator>
struct obstacle_
{
  typedef obstacle_<ContainerAllocator> Type;

  obstacle_()
    : x()
    , y()
    , z()
    , width()
    , height()
    , length()
    , classification()  {
    }
  obstacle_(const ContainerAllocator& _alloc)
    : x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , width(_alloc)
    , height(_alloc)
    , length(_alloc)
    , classification(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _x_type;
  _x_type x;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _y_type;
  _y_type y;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _z_type;
  _z_type z;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _width_type;
  _width_type width;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _height_type;
  _height_type height;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _length_type;
  _length_type length;

   typedef  ::std_msgs::String_<ContainerAllocator>  _classification_type;
  _classification_type classification;





  typedef boost::shared_ptr< ::wizzybug_msgs::obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wizzybug_msgs::obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct obstacle_

typedef ::wizzybug_msgs::obstacle_<std::allocator<void> > obstacle;

typedef boost::shared_ptr< ::wizzybug_msgs::obstacle > obstaclePtr;
typedef boost::shared_ptr< ::wizzybug_msgs::obstacle const> obstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wizzybug_msgs::obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wizzybug_msgs::obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wizzybug_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'wizzybug_msgs': ['/home/tim/wizzy_git/wizzy/simulation_ws/src/wizzybug_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wizzybug_msgs::obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wizzybug_msgs::obstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wizzybug_msgs::obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wizzybug_msgs::obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wizzybug_msgs::obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wizzybug_msgs::obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wizzybug_msgs::obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d2575537d9593df2bf86f5b4318f6e4";
  }

  static const char* value(const ::wizzybug_msgs::obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d2575537d9593dfULL;
  static const uint64_t static_value2 = 0x2bf86f5b4318f6e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::wizzybug_msgs::obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wizzybug_msgs/obstacle";
  }

  static const char* value(const ::wizzybug_msgs::obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wizzybug_msgs::obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 x\n"
"std_msgs/Float64 y\n"
"std_msgs/Float64 z\n"
"std_msgs/Float64 width\n"
"std_msgs/Float64 height\n"
"std_msgs/Float64 length\n"
"\n"
"std_msgs/String classification\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::wizzybug_msgs::obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wizzybug_msgs::obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.length);
      stream.next(m.classification);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wizzybug_msgs::obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wizzybug_msgs::obstacle_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.z);
    s << indent << "width: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.height);
    s << indent << "length: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.length);
    s << indent << "classification: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.classification);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WIZZYBUG_MSGS_MESSAGE_OBSTACLE_H
