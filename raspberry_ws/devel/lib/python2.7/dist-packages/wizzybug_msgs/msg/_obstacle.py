# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from wizzybug_msgs/obstacle.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class obstacle(genpy.Message):
  _md5sum = "8d2575537d9593df2bf86f5b4318f6e4"
  _type = "wizzybug_msgs/obstacle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Float64 x
std_msgs/Float64 y
std_msgs/Float64 z
std_msgs/Float64 width
std_msgs/Float64 height
std_msgs/Float64 length

std_msgs/String classification

================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['x','y','z','width','height','length','classification']
  _slot_types = ['std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/String']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,width,height,length,classification

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(obstacle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = std_msgs.msg.Float64()
      if self.y is None:
        self.y = std_msgs.msg.Float64()
      if self.z is None:
        self.z = std_msgs.msg.Float64()
      if self.width is None:
        self.width = std_msgs.msg.Float64()
      if self.height is None:
        self.height = std_msgs.msg.Float64()
      if self.length is None:
        self.length = std_msgs.msg.Float64()
      if self.classification is None:
        self.classification = std_msgs.msg.String()
    else:
      self.x = std_msgs.msg.Float64()
      self.y = std_msgs.msg.Float64()
      self.z = std_msgs.msg.Float64()
      self.width = std_msgs.msg.Float64()
      self.height = std_msgs.msg.Float64()
      self.length = std_msgs.msg.Float64()
      self.classification = std_msgs.msg.String()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.x.data, _x.y.data, _x.z.data, _x.width.data, _x.height.data, _x.length.data))
      _x = self.classification.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.x is None:
        self.x = std_msgs.msg.Float64()
      if self.y is None:
        self.y = std_msgs.msg.Float64()
      if self.z is None:
        self.z = std_msgs.msg.Float64()
      if self.width is None:
        self.width = std_msgs.msg.Float64()
      if self.height is None:
        self.height = std_msgs.msg.Float64()
      if self.length is None:
        self.length = std_msgs.msg.Float64()
      if self.classification is None:
        self.classification = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.x.data, _x.y.data, _x.z.data, _x.width.data, _x.height.data, _x.length.data,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.classification.data = str[start:end].decode('utf-8')
      else:
        self.classification.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.x.data, _x.y.data, _x.z.data, _x.width.data, _x.height.data, _x.length.data))
      _x = self.classification.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.x is None:
        self.x = std_msgs.msg.Float64()
      if self.y is None:
        self.y = std_msgs.msg.Float64()
      if self.z is None:
        self.z = std_msgs.msg.Float64()
      if self.width is None:
        self.width = std_msgs.msg.Float64()
      if self.height is None:
        self.height = std_msgs.msg.Float64()
      if self.length is None:
        self.length = std_msgs.msg.Float64()
      if self.classification is None:
        self.classification = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.x.data, _x.y.data, _x.z.data, _x.width.data, _x.height.data, _x.length.data,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.classification.data = str[start:end].decode('utf-8')
      else:
        self.classification.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
